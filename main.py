import telebot
import sqlite3
import base64
import json
import shutil
import time

print("hello")
bot = telebot.TeleBot('5227474901:AAGj1aSOg85F9f6MWyPFUkLIFZTfUfSwOdw') # –¢–æ–∫–µ–Ω –±–æ—Ç–∞

db = sqlite3.connect('base.db', check_same_thread=False) # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
sql = db.cursor()

chat = [] # –°–ø–∏—Å–æ–∫ chat_id –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –∏ –æ–∂–∏–¥–∞—é—Ç –æ—Ç –Ω–∞—Å –æ—Ç–≤–µ—Ç–∞
dict_with_paths_to_images = {}

TO_CHAT_ID = -1001572818047



@bot.message_handler(commands=['start']) # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç
def start(message):
    print (type(message))
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard1 = telebot.types.InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', callback_data='application')
    keyboard.add(keyboard1)
    bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n \n'
                                      '–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø–µ [–ü–æ–∫—É–ø–∫–∞ –†–µ–∫–ª–∞–º—ã|Telegram](https://t.me/UniWoo).\n \n'
                                      '–í–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ 9 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ.'
                                      , reply_markup=keyboard, parse_mode="Markdown") # –°–∞–º–æ–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
    sql.execute('SELECT * FROM users WHERE user_id = ?', (message.chat.id,))

    if sql.fetchone() == None:
        sql.execute('INSERT INTO users VALUES (NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', (message.chat.id, 'none','none', 'none', 'none', 'none', 'none', 'none', 'none', 'none', 'none', message.from_user.username, 0))
        db.commit()

@bot.message_handler(content_types=['text'])
def text_handler(message):
    if message.chat.type == 'private':
        bot.send_message(message.chat.id, '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ /start')

@bot.callback_query_handler(func=lambda call:True)
def question(call):
    if call.data == 'application':
        sql.execute(f'SELECT * FROM users WHERE user_id = {call.message.chat.id}')
        ans = sql.fetchone()
        #status = ans[14]
        #if status == 0 or 1:
        msg = bot.send_message(chat_id=call.message.chat.id, text="*–®–∞–≥ 1 –∏–∑ 9* \n\n–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —Ç–µ–º—ã –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ. \n\n#—Ç–µ–º–∞1 #—Ç–µ–º–∞2 #—Ç–µ–º–∞3 (–Ω–µ –±–æ–ª–µ–µ 3-—Ö)", parse_mode= "Markdown") # –ü–µ—Ä–≤—ã # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å

        bot.register_next_step_handler(msg, question2)
        #else:
            #bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã —É–∂–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É.üö∑") # –û—Ç–≤–µ—Ç –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤—Ç–æ—Ä–æ–π —Ä–∞–∑
    elif call.data == 'sent':
        sql.execute(f"""UPDATE users SET status = 1 WHERE user_id = {call.message.chat.id}""")
        db.commit()
        if (call.message.chat.id in chat):
            print(chat)
        else:
            chat.append(call.message.chat.id)
            print(chat)
        bot.send_message(chat_id=call.message.chat.id, text="–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ!") # –û—Ç–≤–µ—Ç –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É
        sql.execute(f'SELECT * FROM users WHERE id = 1')
        ans = sql.fetchone()
        sql.execute(f'SELECT * FROM users WHERE user_id = {call.message.chat.id}')
        anss = sql.fetchone()
        ans1 = anss[2]
        ans2 = anss[3]
        ans3 = anss[4]
        ans4 = anss[5]
        ans5 = anss[6]
        ans6 = anss[7]
        ans7 = anss[8]
        ans8 = anss[9]
        ans9 = anss[10]
        ans10 = anss[11]
        username = anss[12]
        key = telebot.types.InlineKeyboardMarkup()
        key1 = telebot.types.InlineKeyboardButton(text='–ü—Ä–∏–Ω—è—Ç—å‚úÖ', callback_data='accepted')
        key2 = telebot.types.InlineKeyboardButton(text='–û—Ç–∫–ª–æ–Ω–∏—Ç—å‚ùå', callback_data='reject')
        key.add(key1, key2)
        keyboard = telebot.types.InlineKeyboardMarkup()
        like_button = telebot.types.InlineKeyboardButton(text="–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", url='t.me/PokupkaReklami_bot', callback_data='like')
        keyboard.add(like_button)

        global dict_with_paths_to_images
        with open("paths_of_images.json", "r") as read_file:
            dict_with_paths_to_images = json.load(read_file)  # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –≤ json-–µ.
        end_of_path_of_image = dict_with_paths_to_images[str(call.message.chat.id)]
        print ("bm")
        if ans9 == '–î–∞–ª–µ–µ':
            bot.send_photo(TO_CHAT_ID,
                           open(str(call.message.chat.id) + '/' + end_of_path_of_image, "rb"),
                           caption=f'–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç @{username}:\n\n{ans1}\n*–ü–ª–æ—â–∞–¥–∫–∞: *{ans2}\n*–û–ø–∏—Å–∞–Ω–∏–µ: *{ans3}\n\n*–°—Ç–æ–∏–º–æ—Å—Ç—å: *{ans5} —Ä—É–±.\n*–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:*\n{ans6}, {ans8} \n*–ü—Ä–æ–¥—É–∫—Ç: *{ans10}',
                           parse_mode="Markdown", reply_markup=keyboard)
            shutil.rmtree(str(call.message.chat.id))
        else:
            bot.send_photo(TO_CHAT_ID,
                           open(str(call.message.chat.id) + '/' + end_of_path_of_image, "rb"),
                           caption=f'–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç @{username}:\n\n{ans1}\n*–ü–ª–æ—â–∞–¥–∫–∞: *{ans2}\n*–û–ø–∏—Å–∞–Ω–∏–µ: *{ans3}\n\n*–°—Ç–æ–∏–º–æ—Å—Ç—å: *{ans5} —Ä—É–±.\n*–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:*\n{ans6}, {ans8} \n*–ì–æ—Ä–æ–¥(–∞): *{ans9}\n*–ü—Ä–æ–¥—É–∫—Ç: *{ans10}',
                           parse_mode="Markdown", reply_markup=keyboard)
            shutil.rmtree(str(call.message.chat.id))


    if call.data == 'accepted':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É.‚úÖ") # –û—Ç–≤–µ—Ç –µ—Å–ª–∏ –≤—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É
        msm = chat[0]
        bot.send_message(msm, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø—Ä–∏–Ω—è—Ç—ã –≤ –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É!‚úÖ') # –û—Ç–≤–µ—Ç —Ç–æ–º—É –∫–æ–≥–æ –≤—ã –ø—Ä–∏–Ω—è–ª–∏
        del chat[0]
    elif call.data == 'reject':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É.‚ùå") # –û—Ç–≤–µ—Ç –µ—Å–ª–∏ –≤—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É
        msm = chat[0]
        bot.send_message(msm, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–∞–º –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç–µ.‚ùå') # –û—Ç–≤–µ—Ç —Ç–æ–º—É –∫–æ–≥–æ –≤—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏
        del chat[0]


def question2(message):
    question1 = message.text
    if question1[0] == '#':
        sql.execute(f"""UPDATE users SET answer = '{question1}' WHERE user_id = {message.chat.id}""")
        db.commit()
        msg = bot.send_message(message.chat.id,
                               '*–®–∞–≥ 2 –∏–∑ 9* \n\n–ü–ª–æ—â–∞–¥–∫–∞: \n(Telegram, Ozon, –≤–∞—à —Å–∞–π—Ç, YouTube –∏ —Ç.–ø.)',
                               parse_mode="Markdown")  # –í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
        bot.register_next_step_handler(msg, question3)
    else:
        msg = bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑, –∏—Å–ø–æ–ª—å–∑—É—è #. –ù–∞–ø—Ä–∏–º–µ—Ä #–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏')
        bot.register_next_step_handler(msg, question2)


def question3(message):
    question2 = message.text
    sql.execute(f"""UPDATE users SET answer2 = '{question2}' WHERE user_id = {message.chat.id}""")
    db.commit()
    msg = bot.send_message(message.chat.id, '*–®–∞–≥ 3 –∏–∑ 9* \n\n–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).\n\n*–ù–∞–ø—Ä–∏–º–µ—Ä*: _–ó–∞–Ω–∏–º–∞—é—Å—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º —Ç–∞–±–∞–∫–∞ –¥–ª—è –∫–∞–ª—å—è–Ω–æ–≤ –∏ –ø—Ä–æ–¥–≤–∏–≥–∞—é —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –≤ –ò–Ω—Å—Ç–∞–≥—Ä–∞–º–µ._', parse_mode="Markdown")  # –í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
    bot.register_next_step_handler(msg, question4)


def question4(message):
    question3 = message.text
    sql.execute(f"""UPDATE users SET answer3 = '{question3}' WHERE user_id = {message.chat.id}""")
    db.commit()
    msg = bot.send_message(message.chat.id, '*–®–∞–≥ 4 –∏–∑ 9* \n\n–°—É–º–º–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã –≥–æ—Ç–æ–≤—ã *–æ—Ç–¥–∞—Ç—å* –∑–∞ —Ä–µ–∫–ª–∞–º—É?\n(–≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ç - –¥–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 1000 - 5000)', parse_mode= "Markdown") # –í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
    bot.register_next_step_handler(msg, question6)


def question6(message):
    question4 = message.text
    sql.execute(f"""UPDATE users SET answer5 = '{question4}' WHERE user_id = {message.chat.id}""")
    db.commit()
    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.add('–ü–∞—Ä–Ω–∏', '–î–µ–≤—É—à–∫–∏', '–ù–µ–≤–∞–∂–Ω–æ')
    msg = bot.send_message(message.chat.id, '*–®–∞–≥ 5 –∏–∑ 9* \n\n–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:', parse_mode= "Markdown", reply_markup=markup) # –í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
    bot.register_next_step_handler(msg, question7)

def question7(message):
    question6 = message.text
    sql.execute(f"""UPDATE users SET answer6 = '{question6}' WHERE user_id = {message.chat.id}""")
    db.commit()
    msg = bot.send_message(message.chat.id, '*–®–∞–≥ 6 –∏–∑ 9* \n\n–í–æ–∑—Ä–∞—Å—Ç —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏? *–û–¢* \n(–≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ç - –¥–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 16-40)', parse_mode= "Markdown") # –í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
    bot.register_next_step_handler(msg, question9)


def question9(message):
    question7 = message.text
    sql.execute(f"""UPDATE users SET answer8 = '{question7}' WHERE user_id = {message.chat.id}""")
    db.commit()
    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.add('–î–∞–ª–µ–µ')
    msg = bot.send_message(message.chat.id, '*–®–∞–≥ 7 –∏–∑ 9* \n\n–ì–æ—Ä–æ–¥(–∞):\n–ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –≤–∞–∂–µ–Ω, –Ω–∞–∂–º–∏—Ç–µ –î–∞–ª–µ–µ', parse_mode= "Markdown", reply_markup=markup) # –í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
    bot.register_next_step_handler(msg, question10)

def question10(message):
    question9 = message.text
    sql.execute(f"""UPDATE users SET answer9 = '{question9}' WHERE user_id = {message.chat.id}""")
    db.commit()
    msg = bot.send_message(message.chat.id, '*–®–∞–≥ 8 –∏–∑ 9* \n\n–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å.', parse_mode= "Markdown") # –í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
    bot.register_next_step_handler(msg, question_with_photo)


def question_with_photo(message):
    question10 = message.text
    sql.execute(f"""UPDATE users SET answer10 = '{question10}' WHERE user_id = {message.chat.id}""")
    db.commit()
    bot.send_message(message.chat.id, '*–®–∞–≥ 9 –∏–∑ 9*\n\n –û—Ç–ø—Ä–∞–≤—å—Ç–µ *–æ–¥–Ω–æ* —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞.', parse_mode= "Markdown") # –§—É–Ω—Ü–∏—è finish –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ save_photo


def finish(message, end_of_path_of_image):
    keyboards = telebot.types.InlineKeyboardMarkup()
    keyboard2 = telebot.types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—åüí¨', callback_data='sent')
    keyboard3 = telebot.types.InlineKeyboardButton(text='–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æüåÄ', callback_data='application')
    keyboards.add(keyboard2, keyboard3)

    sql.execute(f'SELECT * FROM users WHERE user_id = {message.chat.id}')
    ans = sql.fetchone()
    ans1 = ans[2]
    ans2 = ans[3]
    ans3 = ans[4]
    ans4 = ans[5]
    ans5 = ans[6]
    ans6 = ans[7]
    ans7 = ans[8]
    ans8 = ans[9]
    ans9 = ans[10]
    ans10 = ans[11]

    if ans9 == '–î–∞–ª–µ–µ':
        message_with_answers = f'–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: \n\n{ans1}\n*–ü–ª–æ—â–∞–¥–∫–∞:* {ans2}\n*–û–ø–∏—Å–∞–Ω–∏–µ:* {ans3}\n\n*–°—Ç–æ–∏–º–æ—Å—Ç—å:* {ans5} —Ä—É–±.\n*–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:*\n{ans6}, {ans8} \n*–ü—Ä–æ–¥—É–∫—Ç:* {ans10}'
        ext_photo(message, end_of_path_of_image, keyboards, message_with_answers)
    else:
        message_with_answers = f'–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: \n\n{ans1}\n*–ü–ª–æ—â–∞–¥–∫–∞:* {ans2}\n*–û–ø–∏—Å–∞–Ω–∏–µ:* {ans3}\n\n*–°—Ç–æ–∏–º–æ—Å—Ç—å:* {ans5} —Ä—É–±.\n*–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:*\n{ans6}, {ans8} \n*–ì–æ—Ä–æ–¥(–∞):* {ans9}\n*–ü—Ä–æ–¥—É–∫—Ç:* {ans10}'
        ext_photo(message, end_of_path_of_image, keyboards, message_with_answers)

from pathlib import Path


    #–ß–ê–°–¢–¨ –° –§–û–¢–û
    # –°–æ—Ö—Ä–∞–Ω–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø–∞–ø–∫—É `/files/%ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/photos`
@bot.message_handler(content_types=['photo'])
def save_photo(message):
    print (type(message))
    # —Å–æ–∑–¥–∞–¥–∏–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    Path(str(message.chat.id) + '/photos').mkdir(parents=True, exist_ok=True)

    # —Å–æ—Ö—Ä–∞–Ω–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    file_info = bot.get_file(message.photo[-1].file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    end_of_path_of_image = file_info.file_path
    src = str(message.chat.id) + '/' + end_of_path_of_image
    with open(src, 'wb') as new_file:
        new_file.write(downloaded_file)

    # —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞!
    # –æ—Ç–∫—Ä–æ–µ–º —Ñ–∞–π–ª –Ω–∞ —á—Ç–µ–Ω–∏–µ  –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ base64
    with open(str(message.chat.id) +f'/{end_of_path_of_image}', "rb") as image_file:
        encoded_string = base64.b64encode(image_file.read())

    # –ó–∞–ø–∏—à–µ–º –∫–æ–Ω–µ—Ü –ø—É—Ç–∏ –≤ json
    dict_with_paths_to_images[message.chat.id] = end_of_path_of_image
    with open("paths_of_images.json", "w") as write_file:
        json.dump(dict_with_paths_to_images, write_file)

    # –æ—Ç–∫—Ä–æ–µ–º –ë–î –∏ –∑–∞–ø–∏—à–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, base64, –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ)
    conn = sqlite3.connect("test.db")
    cursor = conn.cursor()
    cursor.execute('INSERT OR REPLACE INTO users VALUES (?, ?, ?)', (message.chat.id, encoded_string, str(message.caption)))
    conn.commit()

    finish(message, end_of_path_of_image)


def ext_photo(message, end_of_path_of_image, keyboards, message_with_answers):
    print (end_of_path_of_image)
    # –æ—Ç–∫—Ä–æ–µ–º –ë–î –∏ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–≤–ª–µ—á—ë–º –¥–∞–Ω–Ω—ã–µ base64
    conn = sqlite3.connect("test.db")
    img = conn.execute('SELECT img FROM users WHERE tlgrm_id = ?', (message.chat.id,)).fetchone()
    if img is None:
        conn.close()
        return None
    else:
        conn.close()

        # —Å–æ—Ö—Ä–∞–Ω–∏–º base64 –≤ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with open(str(message.chat.id) + '/' + end_of_path_of_image, "wb") as fh:
            fh.write(base64.decodebytes(img[0]))
            bot.send_photo(message.chat.id,
                           open(str(message.chat.id) + '/' + end_of_path_of_image, "rb"),
                           caption=message_with_answers,
                           reply_markup=keyboards, parse_mode="Markdown")


if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            time.sleep(2)
            print(e)


